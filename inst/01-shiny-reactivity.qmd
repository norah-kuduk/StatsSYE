### 15.1 Basic Reactivity (Class Prep)
Read Sections 3.1 through 3.3 in the Basic Reactivity Chapter of Mastering Shiny

*Exercise 1* 3.3.6 Exercise 1 in Mastering Shiny.
```{r}
library(shiny)
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)

server1 <- function(input, output, server) {
  output$greeting <- renderText(paste0("Hello ", name))
}

server2 <- function(input, output, server) {
  greeting <- paste0("Hello ", input$name)
  output$greeting <- renderText(greeting)
}

server3 <- function(input, output, server) {
  output$greeting <- paste0("Hello", input$name)
}

shinyApp(ui, server)
```

*Exercise 2* 3.3.6 Exercise 2 in Mastering Shiny. You do not need to submit your sketches but you should bring them to class.

```{r}
server1 <- function(input, output, session) {
  c <- reactive(input$a + input$b)
  e <- reactive(c() + input$d)
  output$f <- renderText(e())
}
server2 <- function(input, output, session) {
  x <- reactive(input$x1 + input$x2 + input$x3)
  y <- reactive(input$y1 + input$y2)
  output$z <- renderText(x() / y())
}
server3 <- function(input, output, session) {
  d <- reactive(c() ^ input$d)
  a <- reactive(input$a * 10)
  c <- reactive(b() / input$c) 
  b <- reactive(a() + input$b)
}
```


### 15.2
```{r}
library(tidyverse)

theme_set(theme_minimal())

atp_df <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2023.csv")
wta_df <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2023.csv")

both_df <- bind_rows(atp_df, wta_df)

both_long <- both_df |> pivot_longer(c(winner_name, loser_name))

## only keep players who have player over 50 matches
both_n50 <- both_long |> group_by(value) |> summarise(n = n()) |>
  filter(n > 50)

## construct various statistics
major_tennis <- semi_join(both_long, both_n50, by = c("value"))
major_tennis <- major_tennis |> mutate(w_svperc = 100 * w_1stIn / w_svpt,
                        l_svperc = 100 * l_1stIn / l_svpt,
                        w_firstwon = 100 * w_1stWon / w_1stIn,
                        l_firstwon = 100 * l_1stWon / l_1stIn,
                        w_secondwon = 100 * w_2ndWon / (w_svpt - w_1stIn),
                        l_secondwon = 100 * l_2ndWon / (l_svpt - l_1stIn))
```


```{r}
major_tennis_w <- major_tennis |> filter(name == "winner_name")
major_tennis_l <- major_tennis |> filter(name == "loser_name")

w_small <- major_tennis_w |> select(value, winner_seed, w_ace, w_df,
                                    w_svperc, w_firstwon, w_secondwon) |>
  rename(seed = winner_seed, ace = w_ace, df = w_df, svperc = w_svperc,
         firstwon = w_firstwon, secondwon = w_secondwon)

l_small <- major_tennis_l |> select(value, loser_seed, l_ace, l_df,
                                    l_svperc, l_firstwon, l_secondwon) |>
  rename(seed = loser_seed, ace = l_ace, df = l_df, svperc = l_svperc,
         firstwon = l_firstwon, secondwon = l_secondwon)

df <- bind_rows(w_small, l_small) |>
  rename(player = "value")
df
#> # A tibble: 3,637 × 7
#>   player              seed   ace    df svperc firstwon secondwon
#>   <chr>              <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>
#> 1 Taylor Fritz           3    15     2   61.2     86.5      48.5
#> 2 Frances Tiafoe        NA     3     1   70.4     78.9      37.5
#> 3 Taylor Fritz           3    11     0   62.5     88        63.3
#> 4 Frances Tiafoe        NA     5     4   60.7     83.8      45.8
#> 5 Stefanos Tsitsipas     1     9     1   53.1     82.7      60.9
#> 6 Lorenzo Musetti       NA     2     1   61.0     72        75  
#> # ℹ 3,631 more rows
```

Step 1: 
```{r}
# Make a histogram of one variable for one specific player
df_tiafoe <- df |> filter(player == "Frances Tiafoe")
ggplot(df_tiafoe, aes(x = ace)) +
  geom_histogram(bins = 15, fill = "lightblue", colour = "grey21")
```


```{r}
library(shiny)
library(glue)

ui <- fluidPage(
  selectInput("player", "Select a player", choices = unique(df$player)),
  radioButtons("variable", "Select a variable", choices = c("ace", "df", "svperc", "firstwon", "secondwon")),
  sliderInput("bins", "Select # of bins", value = 15, min = 0, max = 30),
  plotOutput("histogram")
)


server <- function(input, output, session) {
  df_player <- reactive(df |> filter(player == input$player))
  output$histogram <- renderPlot({
    df_player_data <- df_player()
    
    ggplot(df_player_data, aes(x = .data[[input$variable]])) +
      geom_histogram(bins = input$bins, fill = "lightblue", colour = "grey21") +
      labs(
        x = input$variable,
        y = "Count",
        title = glue("Histogram of {input$variable} for {input$player}")
      )
  })
}

shinyApp(ui, server)
```

Exercise 1. If we move the output$name_of_histogram <- .... code to the very beginning of the server function, do you think the app will still run? Give a reason

Exercise 2. Draw the reactive graph for the Tennis app. Make sure to include all inputs, outputs, and reactive expressions in your graph.

Exercise 3. Sketch the reactive graph for the majors app in the previous section. Make sure to include all inputs, outputs, and reactive expressions in your graph.

### 15.3

Exercise 1. In the tennis app, change the histogram input from a sliderInput() to a numericInput().

```{r}
library(shiny)
library(glue)

ui <- fluidPage(
  selectInput("player", "Select a player", choices = unique(df$player)),
  radioButtons("variable", "Select a variable", choices = c("ace", "df", "svperc", "firstwon", "secondwon")),
  numericInput("bins", "Select # of bins", value = 15, min = 0, max = 30),
  plotOutput("histogram")
)


server <- function(input, output, session) {
  df_player <- reactive(df |> filter(player == input$player))
  output$histogram <- renderPlot({
    df_player_data <- df_player()
    
    ggplot(df_player_data, aes(x = .data[[input$variable]])) +
      geom_histogram(bins = input$bins, fill = "lightblue", colour = "grey21") +
      labs(
        x = input$variable,
        y = "Count",
        title = glue("Histogram of {input$variable} for {input$player}")
      )
  })
}

shinyApp(ui, server)
```

Exercise 2. In the tennis app, change the histogram input back to sliderinput(). Then, apply 2.2.8 Exercise 3 in the Mastering Shiny book to the tennis app slider.

Exercise 3. Add an additional input or output (or both!) to the Tennis App. You can decide what you want to add here!

```{r}
library(shiny)
library(glue)
library(knitr)

ui <- fluidPage(
  selectInput("player", "Select a player", choices = unique(df$player)),
  radioButtons("variable", "Select a variable", choices = c("ace", "df", "svperc", "firstwon", "secondwon")),
  sliderInput("bins", "Select # of bins", 
              value = 0, min = 0, max = 100, step = 5, animate = TRUE),
  plotOutput("histogram"),
  verbatimTextOutput("summary")
)


server <- function(input, output, session) {
  df_player <- reactive(df |> filter(player == input$player))
  output$histogram <- renderPlot({
    df_player_data <- df_player()
    
    ggplot(df_player_data, aes(x = .data[[input$variable]])) +
      geom_histogram(bins = input$bins, fill = "lightblue", colour = "grey21") +
      labs(
        x = input$variable,
        y = "Count",
        title = glue("Histogram of {input$variable} for {input$player}")
      )
  })
  
  output$summary <- renderPrint({
    df_player_data <- df_player()
    summary_stats <- df_player_data |>
      summarise(
        Mean = mean(.data[[input$variable]], na.rm = TRUE),
        SD = sd(.data[[input$variable]], na.rm = TRUE)
      )
    cat("Summary Statistics:\n")
    print(summary_stats)
  })
}

shinyApp(ui, server)
```

### 15.4

```{r}
poke_df <- read_csv(here::here("data/pokemon_full.csv"))
poke_long <- poke_df |> pivot_longer(4:9, values_to = "value", 
                                      names_to = "stat")

poke_small <- poke_long |>
  filter(Name == "Bulbasaur" | Name == "Ivysaur")
ggplot(data = poke_small, aes(x = stat, y = value)) +
  geom_col(aes(fill = Name), position = "dodge") +
  scale_fill_viridis_d()
```

```{r}

library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectizeInput("pokechoose1", label = "Choose Pokemon",
                     choices = poke_df$Name, selected = "Bulbasaur")
    ),
    mainPanel(
      plotOutput(outputId = "pokegraph")
    )
  )
)

server <- function(input, output, session) {
  
  output$pokegraph <- renderPlot({
    poke_react <- poke_long |> filter(Name %in% input$pokechoose1)
    
    ggplot(data = poke_react, aes(x = stat, y = value)) +
      geom_point() +
      geom_segment(aes(xend = stat, y = 0, yend = value)) +
      coord_flip() +
      labs(title = glue::glue("Graph of the Stats for", input$pokechoose1))
  })
  
}

shinyApp(ui, server)
```

```{r}
library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      selectizeInput("pokechoose1", label = "Choose Pokemon",
                     choices = poke_df$Name, selected = "Bulbasaur",
                     multiple = TRUE)
      ),
    mainPanel(
      plotOutput(outputId = "pokegraph")
    )
  )
)

server <- function(input, output, session) {
  
  poke_react <- reactive({
    poke_long |> filter(Name %in% input$pokechoose1) 
  })
  
  output$pokegraph <- renderPlot({
    
    ggplot(data = poke_react(),
           aes(x = value, y = stat)) +
      geom_col(aes(fill = Name),
               position = position_dodge2(reverse = TRUE)) +
      scale_fill_viridis_d() +
      theme_minimal(base_size = 34)
    
  })
  
}

shinyApp(ui, server)
```

