```{r}
library(f1dataR)
library(f1animateR)
library(tidyverse)
library(gganimate)
library(knitr)
```

### Various App Testing 

```{r}
data <- get_session_drivers_and_teams(2024, 24, "Q") |> mutate(driver_code = abbreviation)
```

```{r}
comparison <- data |>
        filter(driver_code == "VER" | driver_code == "PER")
```

```{r}
test <- load_session_laps(2024, 1, "Q")
```

```{r}
load_schedule(2024)
```

```{r}
get_session_drivers_and_teams(2024, 24, "Q")
```

```{r}
get_session_drivers_and_teams(2021, 15, "Q")
```

```{r}
get_team_by_driver(
  "TSU",
  season = get_current_season(),
  round = 1,
  short = TRUE
)
```

```{r}
results <- load_results(season = "current", round = "last")

drivers <- load_drivers(season = 2024)
```

```{r}
inner_join(results, drivers, by = "driver_id")
```


```{r}
driver1_team <- tolower(get_team_by_driver("NOR", season = 2024, round = 1, short = TRUE))
driver2_team <- tolower(get_team_by_driver("VER", season = 2024, round = 1, short = TRUE))

driver1_color <- constructor_color(driver1_team)
driver2_color <- constructor_color(driver2_team)

setNames(c(driver1_color, driver2_color), c(input$driver_1, input$driver_2))
```

```{r}
full_results <- load_results(2024, 1)

driver_data <- load_drivers(2024)

data <- inner_join(full_results, driver_data, by = "driver_id")

data <- data |> filter(code == "VER" | code == "NOR") |> select(code, constructor_id, grid, position)
kable(data)
```

```{r}
seasons <- 2018:2024
    
# Fetch and combine drivers from all seasons
driver_data <- bind_rows(lapply(seasons, function(season) {
  load_drivers(season = season) |>
    mutate(season = season)
    }))

driver_data |> 
  unite("Driver", c("given_name", "family_name"), sep = " ") |>
  group_by(code) |> 
  mutate(n_seasons = n()) |> 
  filter(n_seasons > 1)
```

```{r}
season_a <- 2018
season_b <- 2023

seasons <- c(season_a, season_b)

race_data <- bind_rows(lapply(seasons, function(season) {
  load_schedule(season = season)
}))

race_data |> group_by(race_name) |> 
  mutate(num_races = n()) |> 
  filter(num_races > 1) |>
  distinct(race_name)
```

```{r}
schedule_a <- load_schedule(2022)
schedule_b <- load_schedule(2024)
schedule <- bind_rows(schedule_a, schedule_b)
```

```{r}
round_num <- schedule |>
      filter(race_name == "Monaco Grand Prix") |>
      mutate(round = as.integer(round)) |> 
      pull(round)

list(round_num)
```

```{r}
full_results_a <- load_results(2022, round_num[0])
full_results_b <- load_results(2024, round_num[1])

```



### Plotting Abu Dhabi 2024

Lando Norris Pole 1:22.595

Jack Doohan 20th 1:24.105

```{r}
norris_abudhabi_2024 <- get_quali_telemetry(laps = "fastest", season = 2024, round = 24, driver = "NOR", verbose = TRUE)
doohan_abudhabi_2024 <- get_quali_telemetry(laps = "fastest", season = 2024, round = 24, driver = "DOO", verbose = TRUE)
```

```{r}
# smooth Abu Dhabi track data
abu_dhabi_track <- smooth_track(norris_abudhabi_2024)
start_coord <- abu_dhabi_track |> slice(1)
```

```{r}
# det team and driver colors
norris_color <- driver_color("NOR")
doohan_color <- driver_color("DOO")
```

```{r}
# Add driver labels and combine data
norris_abudhabi_2024 <- norris_abudhabi_2024 |> mutate(driver = "Norris")
doohan_abudhabi_2024 <- doohan_abudhabi_2024 |> mutate(driver = "Doohan")
```

```{r}
plot_data <- bind_rows(norris_abudhabi_2024, doohan_abudhabi_2024) |> 
  mutate(driver = as.factor(driver))

single_point<-plot_data |> group_by(driver) |> slice(25)
```

```{r}
# Static plot
static_plot <- ggplot() +
  geom_path(data = abu_dhabi_track, aes(x = x2, y = y2, group = 1), 
            linewidth = 8, color = "white") +
  geom_point(data = start_coord, aes(x = x2, y = y2), 
             color = "black", shape = 18, size = 4) +
  geom_point(data = single_point, aes(x = x, y = y, group = driver, color = driver), 
             size = 3) +
  scale_color_manual(values = c("Norris" = norris_color, "Doohan" = doohan_color)) +
  theme_track() +
  labs(title = "Norris vs. Doohan Qualifying Lap", 
       subtitle = "Abu Dhabi Grand Prix 2024", 
       x = NULL, y = NULL)
```

```{r}
# Correct the track alignment
corrected_plot <- corrected_track(static_plot, norris_abudhabi_2024)
```

```{r}
plot_data |> group_by(driver) |>
    # create groups of 4
    mutate(group = ceiling(row_number() / 16)) |>
    # calculate the mean speed for each group and assign to speed_smooth
    group_by(group) |>
    mutate(speed_smooth = round(mean(speed, na.rm = TRUE))) |>
    ungroup() |>
    # remove the temporary grouping variable
    select(-group)
```

```{r}
smooth_speed(plot_data, driver, 4)
```


```{r}
# Animate the lap with speed overlay
animated_plot <- corrected_plot +
  transition_reveal(along = time) +
  ease_aes('linear') +
  labs(
    caption = paste(
      "Time: {sprintf('%.3f', frame_along)} s\n",
      "Norris Speed: {plot_data$speed[which.min(abs(plot_data$time[plot_data$driver == 'Norris'] - frame_along))]} kph\n",
      "Doohan Speed: {plot_data$speed[which.min(abs(plot_data$time[plot_data$driver == 'Doohan'] - frame_along))]} kph"
    )
  )

# Render animation
animate(animated_plot, width = 700, height = 700, fps = 10)
```






